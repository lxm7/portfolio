{"version":3,"sources":["webpack:///./src/templates/blog-post.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Navbar.js","webpack:///./src/components/Layout.js","webpack:///./src/components/Content.js"],"names":["__webpack_require__","r","__webpack_exports__","d","BlogPostTemplate","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","lodash__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_2__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","_components_Layout__WEBPACK_IMPORTED_MODULE_4__","_components_Content__WEBPACK_IMPORTED_MODULE_5__","_ref","content","contentComponent","description","tags","title","helmet","PostContent","image","Content","a","createElement","className","length","style","marginTop","map","tag","key","to","kebabCase","BlogPost","_ref2","post","data","markdownRemark","html","HTMLContent","frontmatter","url","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","Navbar","react_default","gatsby_browser_entry","href","TemplateWrapper","children","Helmet_default","components_Navbar","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"component---src-templates-blog-post-js-00b47585abc36859cdf1.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { kebabCase } from 'lodash'\nimport Helmet from 'react-helmet'\nimport { graphql, Link } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Content, { HTMLContent } from '../components/Content'\n\nexport const BlogPostTemplate = ({\n  content,\n  contentComponent,\n  description,\n  tags,\n  title,\n  helmet,\n  image,\n}) => {\n  const PostContent = contentComponent || Content\n\n  return (\n    <section className=\"section\">\n      {helmet || ''}\n      <div className=\"container content\">\n        <div className=\"columns\">\n          <div className=\"column is-10 is-offset-1\">\n            <h1 className=\"title is-size-2 has-text-weight-bold is-bold-light\">\n              {title}\n            </h1>\n            <p>{description}</p>\n            <PostContent content={content} />\n            {tags && tags.length ? (\n              <div style={{ marginTop: `4rem` }}>\n                <h4>Tags</h4>\n                <ul className=\"taglist\">\n                  {tags.map(tag => (\n                    <li key={tag + `tag`}>\n                      <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nBlogPostTemplate.propTypes = {\n  content: PropTypes.node.isRequired,\n  contentComponent: PropTypes.func,\n  description: PropTypes.string,\n  title: PropTypes.string,\n  helmet: PropTypes.instanceOf(Helmet),\n}\n\nconst BlogPost = ({ data }) => {\n  const { markdownRemark: post } = data\n\n  return (\n    <Layout>\n      <BlogPostTemplate\n        content={post.html}\n        contentComponent={HTMLContent}\n        description={post.frontmatter.description}\n        helmet={<Helmet title={`${post.frontmatter.title} | Blog`} />}\n        tags={post.frontmatter.tags}\n        title={post.frontmatter.title}\n        image={post.frontmatter.image}\n        url={post.frontmatter.url}\n      />\n    </Layout>\n  )\n}\n\nBlogPost.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.object,\n  }),\n}\n\nexport default BlogPost\n\nexport const pageQuery = graphql`\n  query BlogPostByID($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        description\n        tags\n        image\n        url\n      }\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Navbar = () => (\n  <nav className=\"navbar is-transparent\">\n    <div className=\"container\">\n      <Link className=\"content content--top\" to=\"/\">\n        <h2>Alex Moreton</h2>\n        <p>Front end developer portfolio</p>\n      </Link>\n      <div className=\"content content--top\">\n        <Link className=\"navbar-item\" to=\"/about\">\n          About\n        </Link>\n        <a \n            className=\"navbar-item\"\n            href='https://github.com/lxm7'\n        >\n            Github\n        </a>\n        <a\n            className=\"navbar-item\"\n            href='https://www.linkedin.com/in/alex-moreton-3519633b/'\n        >\n            LinkedIn\n        </a>\n        <a\n            className=\"navbar-item\"\n            href='https://stackoverflow.com/users/1341935/lxm7?tab=profile'\n        >\n            Stackoverflow\n        </a>\n      </div>\n    </div>\n  </nav>\n)\n\nexport default Navbar\n","import React from 'react'\nimport Helmet from 'react-helmet'\n\nimport Navbar from '../components/Navbar'\nimport './all.sass'\n\nconst TemplateWrapper = ({ children }) => (\n  <div>\n    <Helmet title=\"Portfolio | Alex Moreton\" />\n    <Navbar />\n    <div>{children}</div>\n  </div>\n)\n\nexport default TemplateWrapper\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const HTMLContent = ({ content, className }) => (\n  <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\n)\n\nconst Content = ({ content, className }) => (\n  <div className={className}>{content}</div>\n)\n\nContent.propTypes = {\n  content: PropTypes.node,\n  className: PropTypes.string,\n}\n\nHTMLContent.propTypes = Content.propTypes\n\nexport default Content\n"],"sourceRoot":""}